import * as v from "valibot";

const grantSchema = v.union([
	v.literal("unsafeWindow"),
	v.literal("GM_addElement"),
	v.literal("GM_addStyle"),
	v.literal("GM_download"),
	v.literal("GM_getResourceText"),
	v.literal("GM_getResourceURL"),
	v.literal("GM_info"),
	v.literal("GM_log"),
	v.literal("GM_notification"),
	v.literal("GM_openInTab"),
	v.literal("GM_registerMenuCommand"),
	v.literal("GM_unregisterMenuCommand"),
	v.literal("GM_setClipboard"),
	v.literal("GM_getTab"),
	v.literal("GM_saveTab"),
	v.literal("GM_getTabs"),
	v.literal("GM_setValue"),
	v.literal("GM_getValue"),
	v.literal("GM_deleteValue"),
	v.literal("GM_listValues"),
	v.literal("GM_addValueChangeListener"),
	v.literal("GM_removeValueChangeListener"),
	v.literal("GM_xmlhttpRequest"),
	v.literal("GM_webRequest"),
	v.literal("GM_cookie"),
	v.literal("GM.addStyle"),
	v.literal("GM.setValue"),
	v.literal("GM.getValue"),
	v.literal("GM.deleteValue"),
	v.literal("GM.listValues"),
	v.literal("GM.addValueChangeListener"),
	v.literal("GM.removeValueChangeListener"),
	v.literal("GM.getResourceText"),
	v.literal("GM.getResourceUrl"),
	v.literal("GM.registerMenuCommand"),
	v.literal("GM.unregisterMenuCommand"),
	v.literal("GM.xmlHttpRequest"),
	v.literal("GM.download"),
	v.literal("GM.saveTab"),
	v.literal("GM.getTab"),
	v.literal("GM.getTabs"),
	v.literal("GM.info"),
	v.literal("GM.log"),
	v.literal("GM.openInTab"),
	v.literal("GM.notification"),
	v.literal("GM.setClipboard"),
	v.literal("window.onurlchange"),
	v.literal("window.close"),
	v.literal("window.focus"),
]);

const runAtSchema = v.union([
	v.literal("document-end"),
	v.literal("document-start"),
	v.literal("document-body"),
	v.literal("document-idle"),
	v.literal("context-menu"),
]);

export const metaSchema = v.object({
	name: v.string(),
	namespace: v.optional(v.string()),
	version: v.string(),
	description: v.string(),
	match: v.array(v.string()),
	icon: v.optional(v.string()),
	grant: v.optional(v.array(grantSchema)),
	author: v.optional(v.string()),
	homepage: v.optional(v.string()),
	require: v.optional(v.array(v.string())),
	runAt: v.optional(runAtSchema),
	connect: v.optional(v.array(v.string())),
	updateURL: v.optional(v.string()),
	downloadURL: v.optional(v.string()),
});
export type Meta = v.InferOutput<typeof metaSchema>;
